package com.myplex.myplex.ui.fragment;import android.content.Context;import android.content.res.Configuration;import android.os.AsyncTask;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import androidx.annotation.Nullable;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.appcompat.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.github.pedrovgs.LoggerD;import com.myplex.api.APIConstants;import com.myplex.api.APIRequest;import com.myplex.model.ApplicationConfig;import com.myplex.model.CardData;import com.myplex.model.CardDataGeneralInfo;import com.myplex.model.CardDataImagesItem;import com.myplex.model.CarouselInfoData;import com.myplex.model.MenuDataModel;import com.myplex.util.AlertDialogUtil;import com.myplex.util.PrefUtils;import com.myplex.util.SDKLogger;import com.myplex.myplex.R;import com.myplex.myplex.analytics.Analytics;import com.myplex.myplex.events.ContentDownloadEvent;import com.myplex.myplex.model.CacheManager;import com.myplex.myplex.ui.activities.BaseActivity;import com.myplex.myplex.ui.activities.MainActivity;import com.myplex.myplex.ui.adapter.AdapterEpisode;import com.myplex.myplex.ui.adapter.DatesAdapter;import com.myplex.myplex.ui.views.PopUpWindow;import com.myplex.myplex.ui.views.VerticalSpaceItemDecoration;import com.myplex.myplex.utils.DeviceUtils;import com.myplex.myplex.utils.UiUtil;import com.myplex.myplex.utils.Util;import com.myplex.myplex.utils.WeakRunnable;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * Created by Apalya on 15-Dec-15. */public class FragmentEpisodes extends BaseFragment implements CacheManager.CacheManagerCallback {    public static final String PARAM_SELECTED_VOD_DATA = "selectedVODCardData";    private static final String TAG = FragmentRelatedVODList.class.getSimpleName();    public static final String PARAM_BG_SECTION_COLOR = "bg_section_color";    public static final String PARAM_BG_SECTION_LOGO_URL = "logo_url";    public static final String PARAM_SEARCH_QUERY = "search_query";    private RecyclerView mRecyclerView;    private TextView mToolbarTitle;    private TextView mTextViewErroFetch;    private ImageView mHeaderImageView;    private ImageView channelImageView;    private RelativeLayout mRootLayout;    private CardData mRelatedVODData;    private String contentId;    private final CacheManager mCacheManager = new CacheManager();    private int mStartIndex = 1;    private View rootView;    private LayoutInflater mInflater;    private Toolbar mToolbar;    private View mCustomToolBarLayout;    private View.OnClickListener mOnClickCloseAction = new View.OnClickListener() {        @Override        public void onClick(View v) {//            getActivity().finish();            //showOverFlowSettings(v);            mBaseActivity.removeFragment(FragmentEpisodes.this);        }    };    private String mContentType;    private String mSearchQuery;    private AdapterEpisode mAdapterEpisode;    private ProgressBar mProgressBar;    private OnSeasonsLoadedListener mOnSeasonsLoadedListener;    private int visibleThreshold = 5;    private boolean isLoadMoreRequestInProgress;    private boolean mIsLoadingMoreAvailable;    public void setOnSeasonsLoaded(OnSeasonsLoadedListener mOnSeasonsLoadedListener) {        this.mOnSeasonsLoadedListener = mOnSeasonsLoadedListener;    }    public void onScroll(int scrollY) {        if (mRecyclerView == null) return;        LinearLayoutManager linearLayoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();        int totalItemCount = linearLayoutManager.getItemCount();        int lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();        if (mIsLoadingMoreAvailable && !isLoadMoreRequestInProgress /*&& (totalItemCount - 1 <= lastVisibleItem*//* + visibleThreshold*//*)*/) {            LoggerD.debugDownload("do load more");            mStartIndex++;            isLoadMoreRequestInProgress = true;            showLoadingCard();            if (mRelatedVODData != null                    && mRelatedVODData.generalInfo != null                    && mRelatedVODData.generalInfo.type != null                    && APIConstants.TYPE_TVSERIES.equalsIgnoreCase(mRelatedVODData.generalInfo.type)) {                fetchTVEpisodes();                return;            }            fetchRelatedVODData(true);        }    }    private void showLoadingCard() {        if (mAdapterEpisode != null) {            CardData cardData = new CardData();            cardData.generalInfo = new CardDataGeneralInfo();            cardData.generalInfo.type = CardData.TYPE_LOADING;            mAdapterEpisode.add(cardData);            AdapterEpisode.EpisodeViewHolder viewHolder = (AdapterEpisode.EpisodeViewHolder) mRecyclerView.findViewHolderForLayoutPosition(0);            //android.widget.ImageView mCollapseOrExpandBtn -> e            if(viewHolder != null) {                viewHolder.mCollapseOrExpandBtn.requestLayout();            }            mAdapterEpisode.showCollapseAndExpand(viewHolder, mAdapterEpisode.getItem(0), 0);//            mRecyclerView.findViewHolderForLayoutPosition(position - 1).itemView.setVisibility(View.VISIBLE);//            .postInvalidate();        }    }    private void hideLoadingCard() {        if (mAdapterEpisode != null) {            final int position = mAdapterEpisode.getItemCount() - 1;            mAdapterEpisode.removeItem(position);        }    }    public interface OnSeasonsLoadedListener {        void onSeasonsDataLoaded(List<String> seasonsList);        void onEpiosodesLoaded(List<CardData> episodes, boolean isLoadMore);        void onSeasonsNotAvailable();    }    private void pushRelatedVODListFragment(CardData cardData) {        Bundle args = new Bundle();        args.putSerializable(FragmentRelatedVODList.PARAM_SELECTED_VOD_DATA, cardData);        ((MainActivity) mContext).pushFragment(FragmentRelatedVODList.newInstance(args));    }    private String mToolbarIconUrl;    private String mToolbarBGColor;    private boolean mIsFromViewAll;    private TextView mTextViewSeason;    private RelativeLayout mLayoutTVSeasons;    private List<CardData> mListSeasons;    private PopUpWindow mPopUpWindowSeasons;    private int mSelectedSeasonPosition;    private List<String> mListSeasonNames;    private ImageView mImageButtonAllSeasons;    private void showCardDetailsFragment(CardData cardData) {        CacheManager.setSelectedCardData(cardData);        Bundle args = new Bundle();        args.putString(CardDetails.PARAM_CARD_ID, cardData._id);        args.putBoolean(CardDetails.PARAM_AUTO_PLAY, true);        if (mRelatedVODData != null                && mRelatedVODData.generalInfo != null) {            args.putString(CardDetails                    .PARAM_CARD_DATA_TYPE, mRelatedVODData.generalInfo.type);        }        int partnerType = CardDetails.Partners.APALYA;        partnerType = Util.getPartnerTypeContent(cardData);        args.putInt(CardDetails.PARAM_PARTNER_TYPE, partnerType);        String partnerId = cardData == null || cardData.generalInfo == null || cardData.generalInfo.partnerId == null ? null : cardData.generalInfo.partnerId;        args.putString(CardDetails.PARAM_PARTNER_ID, partnerId);        args.putString(Analytics.PROPERTY_SOURCE, Analytics.VALUE_SOURCE_CAROUSEL);        if (mCarouselInfoData != null)            args.putString(Analytics.PROPERTY_SOURCE_DETAILS, mCarouselInfoData.title);        if (mSearchQuery != null) {            args.putString(Analytics.PROPERTY_SOURCE, Analytics.VALUE_SOURCE_SEARCH);            args.putString(Analytics.PROPERTY_SOURCE_DETAILS, mSearchQuery);        }        args.putSerializable(CardDetails.PARAM_RELATED_CARD_DATA, mRelatedVODData);        if (mListSeasonNames != null) {            String seasonName = mListSeasonNames.get(mSelectedSeasonPosition);            args.putString(CardDetails.PARAM_SEASON_NAME, seasonName);        }        mBaseActivity.showDetailsFragment(args, cardData);    }    public static FragmentEpisodes newInstance(Bundle args) {        FragmentEpisodes fragmentRelatedVODList = new FragmentEpisodes();        fragmentRelatedVODList.setArguments(args);        return fragmentRelatedVODList;    }    @Override    public void onResume() {        super.onResume();//        if (DeviceUtils.isTablet(mContext)//                && mContext.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {//            mBaseActivity.setOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);//        } else {//            mBaseActivity.setOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);//        }        if (mAdapterEpisode != null)            mAdapterEpisode.notifyDataSetChanged();        //Log.d(TAG, "onResume");    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        mContext = getActivity();        mBaseActivity = (BaseActivity) getActivity();        readBundleData();        if (!mIsFromViewAll) {            if (mRelatedVODData == null) {                mBaseActivity.removeFragment(this);                return null;            }        }        mInflater = LayoutInflater.from(mContext);        rootView = mInflater.inflate(R.layout.fragment_related_vodlist_on_details, container, false);        mProgressBar = (ProgressBar) rootView.findViewById(R.id.card_loading_progres_bar);        mRecyclerView = (RecyclerView) rootView.findViewById(R.id.tv_guide_channel_listView);        mTextViewErroFetch = (TextView) rootView.findViewById(R.id.error_message);        mToolbar = (Toolbar) rootView.findViewById(R.id.toolbar);        mToolbar.setContentInsetsAbsolute(0, 0);        //Set up Toolbar title        mCustomToolBarLayout = mInflater.inflate(R.layout.custom_toolbar, null, false);        mToolbarTitle = (TextView) mCustomToolBarLayout.findViewById(R.id.toolbar_header_title);        mHeaderImageView = (ImageView) mCustomToolBarLayout.findViewById(R.id.toolbar_settings_button);        channelImageView = (ImageView) mCustomToolBarLayout.findViewById(R.id.toolbar_tv_channel_Img);        mRootLayout = (RelativeLayout) mCustomToolBarLayout.findViewById(R.id.custom_toolbar_layout);        mToolbar.addView(mCustomToolBarLayout);        mLayoutTVSeasons = (RelativeLayout) rootView.findViewById(R.id.layout_season_drop_down);        mTextViewSeason = (TextView) rootView.findViewById(R.id.header_title_text);        mImageButtonAllSeasons = (ImageView) rootView.findViewById(R.id.drop_down_button);        if (mRelatedVODData != null) {            if (mRelatedVODData.globalServiceId != null) {                contentId = mRelatedVODData.globalServiceId;            } else {                contentId = mRelatedVODData._id;            }        }        mStartIndex = 1;        initUI();        if (mRelatedVODData != null                && mRelatedVODData.generalInfo != null                && mRelatedVODData.generalInfo.type != null                && APIConstants.TYPE_TVSERIES.equalsIgnoreCase(mRelatedVODData.generalInfo.type)) {            contentId = mRelatedVODData._id;            prepareTVSeriesUI();            fetchTVSeasons();            return rootView;        }        if (mOnSeasonsLoadedListener != null) {            mOnSeasonsLoadedListener.onSeasonsNotAvailable();        }        fetchRelatedVODData(true);        return rootView;    }    private void readBundleData() {        Bundle args = getArguments();        if (args == null) return;        //Log.d(TAG, "onCreateView()");        mRelatedVODData = null;        if (args.containsKey(FragmentRelatedVODList.PARAM_SELECTED_VOD_DATA)) {            mRelatedVODData = (CardData) args.getSerializable(FragmentRelatedVODList.PARAM_SELECTED_VOD_DATA);        }        mContentType = null;        if (args.containsKey(FragmentCarouselViewAll.PARAM_FRAGMENT_MENU_GROUP_TYPE)) {            mContentType = (String) getArguments().getSerializable(FragmentCarouselViewAll.PARAM_FRAGMENT_MENU_GROUP_TYPE);        }        mSearchQuery = null;        if (args.containsKey(PARAM_SEARCH_QUERY)) {            mSearchQuery = (String) getArguments().getSerializable(PARAM_SEARCH_QUERY);        }        mCarouselInfoData = null;        mToolbarIconUrl = null;        mToolbarBGColor = null;        mCarouselInfoData = CacheManager.getCarouselInfoData();        if (mCarouselInfoData != null && mCarouselInfoData.images != null) {            mToolbarIconUrl = getImageLink(mCarouselInfoData.images);        }        if (mCarouselInfoData != null && !TextUtils.isEmpty(mCarouselInfoData.bgColor)) {            mToolbarBGColor = mCarouselInfoData.bgColor;        }        if (args.containsKey(FragmentRelatedVODList.PARAM_BG_SECTION_LOGO_URL)) {            mToolbarIconUrl = args.getString(FragmentRelatedVODList.PARAM_BG_SECTION_LOGO_URL);        }        if (args.containsKey(FragmentRelatedVODList.PARAM_BG_SECTION_COLOR)) {            mToolbarBGColor = args.getString(FragmentRelatedVODList.PARAM_BG_SECTION_COLOR);        }        if (mCarouselInfoData == null)            if (TextUtils.isEmpty(mToolbarIconUrl) || TextUtils.isEmpty(mToolbarBGColor)) {                if (mRelatedVODData != null                        && mRelatedVODData.publishingHouse != null                        && mRelatedVODData.publishingHouse.publishingHouseName != null                        && mRelatedVODData.publishingHouse.publishingHouseName.equalsIgnoreCase(APIConstants.TYPE_HOOQ)) {                    mToolbarIconUrl = PrefUtils.getInstance().getPrefHooqLogoImageUrl();                    mToolbarBGColor = PrefUtils.getInstance().getPrefHooqBgsectionColor();                }            }        mIsFromViewAll = args.containsKey(FragmentCarouselViewAll.PARAM_FROM_VIEW_ALL);        args.clear();    }    private DatesAdapter mPopupListAdapter;    private ListView mPopUpListView;    private void showSeasonsPopUpWindow(View view) {        mPopUpWindowSeasons.attachPopupToView(view, new PopupWindow.OnDismissListener() {            @Override            public void onDismiss() {            }        });    }    private List<String> getDummySeasons() {        int size = 1;        List<String> dummyList = new ArrayList<>(size);        for (int i = 0; i < size; i++) {            dummyList.add("Loading...");        }        return dummyList;    }    private void fetchTVEpisodes() {        LoggerD.debugLog("FragmentEpisodes:: fetching episodes");        new EpisodesCallTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);    }    private void prepareSeasonsPopup() {        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context                .LAYOUT_INFLATER_SERVICE);        if (inflater == null) return;        View layout = inflater.inflate(R.layout.popup_window, null);        mPopUpWindowSeasons = new PopUpWindow(layout);        // TODO Add dummy data for seasons//        mPopupListAdapter = new DatesAdapter(mContext,new ArrayList<String>(0));        mPopupListAdapter =                new DatesAdapter(mContext, DatesAdapter.AdapterType.SEASONS, getDummySeasons());        mPopUpListView = (ListView) layout.findViewById(R.id.popup_listView);        mPopUpListView.setAdapter(mPopupListAdapter);        mPopUpListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                mPopUpWindowSeasons.dismissPopupWindow();                updateSeasonPosition(position);            }        });    }    public void updateSeasonPosition(int position) {        mSelectedSeasonPosition = position;        mIsLoadingMoreAvailable = true;        mStartIndex = 1;        fetchTVEpisodes();        if (mAdapterEpisode != null                && mListSeasonNames != null                && !mListSeasonNames.isEmpty())            mAdapterEpisode.setCurrentSeasonName(mListSeasonNames.get(mSelectedSeasonPosition));    }    private void prepareTVSeriesUI() {        prepareSeasonsPopup();        mLayoutTVSeasons.setVisibility(View.GONE);        mTextViewSeason.setVisibility(View.GONE);        mLayoutTVSeasons.setOnClickListener(mTodayEPGListener);        mTextViewSeason.setOnClickListener(mTodayEPGListener);        mImageButtonAllSeasons.setOnClickListener(mTodayEPGListener);    }    private void fetchTVSeasons() {        if (contentId == null) {            return;        }        mCacheManager.getRelatedVODListTypeExclusion(contentId, 1, true, APIConstants.TYPE_TVSEASON,                15,                new CacheManager.CacheManagerCallback() {                    @Override                    public void OnCacheResults(List<CardData> dataList) {                        if (dataList == null || dataList.isEmpty()) {                            showNoDataMessage();                            return;                        }                        mListSeasons = dataList;                        updateSeasons(dataList);                    }                    @Override                    public void OnOnlineResults(List<CardData> dataList) {                        if (dataList == null || dataList.isEmpty()) {                            showNoDataMessage();                            return;                        }                        mListSeasons = dataList;                        updateSeasons(dataList);                    }                    @Override                    public void OnOnlineError(Throwable error, int errorCode) {                        //Log.d(TAG, "fetchCarouselData: OnOnlineError: t- ");                        if (errorCode == APIRequest.ERR_NO_NETWORK) {                            AlertDialogUtil.showToastNotification(mContext.getString(R.string.network_error));                            return;                        }                        showNoDataMessage();                    }                });    }    private void updateSeasons(List<CardData> dataList) {        if (dataList == null                || dataList.isEmpty()) {            return;        }//        dataList = sortDataList(dataList);        mListSeasonNames = prepareSeasonNames(dataList);        if (mListSeasonNames == null || mListSeasonNames.isEmpty()) {            SDKLogger.debug("Unable to load season names possible cause might be serialNo from server is null in prepareSeasonName() -> CardData.get(index).content.serialNo");            if (mContext != null)                Toast.makeText(mContext, Analytics.EVENT_UNABLE_TO_FETCH_VIDEO_LINK, Toast.LENGTH_LONG);            return;        }        if (mOnSeasonsLoadedListener != null)            mOnSeasonsLoadedListener.onSeasonsDataLoaded(mListSeasonNames);        mPopupListAdapter = new DatesAdapter(mContext, DatesAdapter.AdapterType.SEASONS, mListSeasonNames);        mPopUpListView.setAdapter(mPopupListAdapter);        fetchTVEpisodes();    }    private List<String> prepareSeasonNames(List<CardData> dataList) {        List<String> seasons = new ArrayList<>();        String seasonText = "Season ";        for (Iterator<CardData> iterator = dataList.iterator(); iterator.hasNext(); ) {            CardData seasonData = iterator.next();            if (seasonData.content != null                    && seasonData.content.serialNo != null) {                seasons.add(seasonText + seasonData.content.serialNo);            }        }        return seasons;    }    private final View.OnClickListener mTodayEPGListener = new View.OnClickListener() {        @Override        public void onClick(View v) {            if (mPopUpWindowSeasons != null                    && mPopUpWindowSeasons.isPopupVisible()) {                mPopUpWindowSeasons.dismissPopupWindow();            } else {                showSeasonsPopUpWindow(v);            }        }    };    private String getImageLink(List<CardDataImagesItem> images) {        if (images == null || images.isEmpty()) {            return null;        }        String[] imageTypes = new String[]{APIConstants.IMAGE_TYPE_ICON};        for (String imageType : imageTypes) {            for (CardDataImagesItem imageItem : images) {                if (DeviceUtils.isTablet(mContext)) {                    if (imageType.equalsIgnoreCase(imageItem.type)                            && UiUtil.getScreenDensity(mContext).equalsIgnoreCase(imageItem.profile)) {                        Log.e("SCREEN DENSITY ", UiUtil.getScreenDensity(mContext)                                + " IMAGE ITEM PROFILE " + imageItem.profile                                + " IMAGE LINK " + imageItem.link);                        return imageItem.link;                    }//                    if (imageType.equalsIgnoreCase(imageItem.type)//                        && ApplicationConfig.XXHDPI.equalsIgnoreCase(imageItem.profile)) {//                    return imageItem.link;//                }                } else {                    if (imageType.equalsIgnoreCase(imageItem.type)                            && ApplicationConfig.XXHDPI.equalsIgnoreCase(imageItem.profile)) {                        Log.e("IMAGE ITEM PROFILE ", imageItem.profile                                + " IMAGE LINK " + imageItem.link);                        return imageItem.link;                    }                }            }        }        return null;    }    private void fetchRelatedVODData(boolean isCachRequest) {        if (getArguments() != null && !getArguments().containsKey(FragmentCarouselViewAll.PARAM_FROM_VIEW_ALL)) {            mCacheManager.getRelatedVODList(contentId, mStartIndex, isCachRequest,                    FragmentEpisodes.this);            return;        }        fetchCarouselData();    }    private void updateDropDownTitle() {        if (mTextViewSeason != null                && !mListSeasonNames.isEmpty()) {            mTextViewSeason.setText(mListSeasonNames.get(mSelectedSeasonPosition));        }    }    private void initUI() {        mRecyclerView.setVisibility(View.VISIBLE);        VerticalSpaceItemDecoration verticalDividerDecoration = new VerticalSpaceItemDecoration((int) mContext                .getResources().getDimension(R.dimen.margin_gap_8));        mRecyclerView.addItemDecoration(verticalDividerDecoration);        mRecyclerView.setItemAnimator(null);        mRecyclerView.setHasFixedSize(true);        mAdapterEpisode = new AdapterEpisode(mContext, getDummyVODList());        mRecyclerView.setAdapter(mAdapterEpisode);        final LinearLayoutManager layoutManager = new LinearLayoutManager(mContext, LinearLayoutManager.VERTICAL, false);        mRecyclerView.setLayoutManager(layoutManager);        mHeaderImageView.setOnClickListener(mOnClickCloseAction);//        rootView.setOnTouchListener(new View.OnTouchListener() {//            @Override//            public boolean onTouch(View v, MotionEvent event) {//                return true;//            }//        });    }    private boolean resizeFragmentHeight() {        boolean isDebug = false;        if (getView() == null                || isDebug                || getView().getLayoutParams() == null) {            return false;        }        if (mRecyclerView == null                || mAdapterEpisode == null                || mRecyclerView.getLayoutManager() == null) {            LoggerD.debugLog("FragmentChannelEpg: invalid recyclerview and adapter");            getView().getLayoutParams().height = 0;            getView().getLayoutParams().height = ViewGroup.LayoutParams.WRAP_CONTENT;            getView().requestLayout();            return false;        }        int totalHeight = 0;        for (int i = 0; i < mAdapterEpisode.getItemCount(); i++) {            View v = mRecyclerView.findViewHolderForAdapterPosition(i) == null ? null : mRecyclerView.findViewHolderForAdapterPosition(i).itemView;            if (v == null) {                if (getView() != null                        && getView().getLayoutParams() != null) {                    getView().getLayoutParams().height = 0;                    getView().getLayoutParams().height = ViewGroup.LayoutParams.WRAP_CONTENT;                    getView().requestLayout();                }                LoggerD.debugLog("invalid v");                return false;            }//        v.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);            totalHeight += (mRecyclerView.getLayoutManager().getDecoratedMeasuredHeight(v));        }        if (getView() != null                && getView().getLayoutParams() != null                && totalHeight > 0) {            getView().getLayoutParams().height = 0;            getView().getLayoutParams().height = totalHeight;            getView().requestLayout();        }        return false;    }    private List<CardData> getDummyVODList() {        List dummyList = new ArrayList<>();        for (int i = 0; i < 10; i++) {            dummyList.add(new CardData());        }        return dummyList;    }    private void fillData(List<CardData> vodListData) {        if (vodListData != null                && vodListData.isEmpty()) {            showNoDataMessage();            return;        }        List<CardData> vodCardDataList = new ArrayList<>(vodListData);        mRecyclerView.setVisibility(View.VISIBLE);        mTextViewErroFetch.setVisibility(View.GONE);        mAdapterEpisode = new AdapterEpisode(mContext, vodCardDataList);//        mAdapterEpisode.setListener(new AdapterEpisode.AdapterDataChange() {//            @Override//            public void onDataChange() {//                postResizeFragmentHeight();//            }//        });        mRecyclerView.setAdapter(mAdapterEpisode);        if (mListSeasonNames != null                && !mListSeasonNames.isEmpty()) {            mAdapterEpisode.setCurrentSeasonName(mListSeasonNames.get(mSelectedSeasonPosition));        }        if (mOnSeasonsLoadedListener != null) {            mOnSeasonsLoadedListener.onEpiosodesLoaded(vodCardDataList, false);        }        mAdapterEpisode.setCarouselInfoData(mCarouselInfoData);        mAdapterEpisode.setSearchQuery(mSearchQuery);        mAdapterEpisode.setRelatedVODData(mRelatedVODData);        mAdapterEpisode.setTVShowData(mRelatedVODData);    }    @Override    public void OnCacheResults(List<CardData> dataList) {        new Handler(Looper.getMainLooper()).post(new WeakRunnable<List<CardData>>(dataList) {            @Override            public void safeRun(List<CardData> cardDataList) {                dismissProgressBar();                if (cardDataList == null) {                    if (!isLoadMoreRequestInProgress) {                        showNoDataMessage();                    }                    return;                }                mIsLoadingMoreAvailable = true;                if (mCacheManager.isLastPage()) {                    mIsLoadingMoreAvailable = false;                }                if (isLoadMoreRequestInProgress) {                    isLoadMoreRequestInProgress = false;                    hideLoadingCard();                    if (mAdapterEpisode != null && cardDataList != null) {                        mAdapterEpisode.addAll(cardDataList);                    }                    AdapterEpisode.EpisodeViewHolder viewHolder = (AdapterEpisode.EpisodeViewHolder) mRecyclerView.findViewHolderForLayoutPosition(0);//                    viewHolder.mCollapseOrExpandBtn.requestLayout();                    mAdapterEpisode.showCollapseAndExpand(viewHolder, mAdapterEpisode.getItem(0), 0);                    return;                }                fillData(cardDataList);            }        });    }    @Override    public void OnOnlineResults(List<CardData> dataList) {        dismissProgressBar();        if (dataList == null) {            if (!isLoadMoreRequestInProgress) {                showNoDataMessage();            }            return;        }        mIsLoadingMoreAvailable = true;        if (mCacheManager.isLastPage()) {            mIsLoadingMoreAvailable = false;        }        if (isLoadMoreRequestInProgress) {            isLoadMoreRequestInProgress = false;            hideLoadingCard();            if (mAdapterEpisode != null && dataList != null) {                mAdapterEpisode.addAll(dataList);            }            AdapterEpisode.EpisodeViewHolder viewHolder = (AdapterEpisode.EpisodeViewHolder) mRecyclerView.findViewHolderForLayoutPosition(0);//            viewHolder.mCollapseOrExpandBtn.requestLayout();            mAdapterEpisode.showCollapseAndExpand(viewHolder, mAdapterEpisode.getItem(0), 0);//            mRecyclerView.postInvalidate();            return;        }        fillData(dataList);    }    @Override    public void OnOnlineError(Throwable error, int errorCode) {        dismissProgressBar();        if (isLoadMoreRequestInProgress) {            hideLoadingCard();        }        if (errorCode == APIRequest.ERR_NO_NETWORK) {            if (!isLoadMoreRequestInProgress) {                showNoDataMessage();            }            return;        }        if (!isLoadMoreRequestInProgress) {            showNoDataMessage();        }    }    @Override    public void onPause() {        super.onPause();    }    private void showNoDataMessage() {        if (mTextViewErroFetch != null) {            if (mTextViewErroFetch != null) {                if (mRelatedVODData != null && mRelatedVODData.generalInfo != null && !APIConstants.TYPE_VODCHANNEL.equals(mRelatedVODData.generalInfo.type)) {                    mTextViewErroFetch.setText(mContext.getString(R.string.error_fetch_videos));                }                if (mRecyclerView != null)                    mRecyclerView.setVisibility(View.GONE);                mTextViewErroFetch.setVisibility(View.VISIBLE);            }        }    }    private CarouselInfoData mCarouselInfoData;    private void fetchCarouselData() {        //Log.d(TAG, "fetchCarouselData:");        if (mCarouselInfoData == null) {            return;        }        final int pageSize = mCarouselInfoData.pageSize > 0 ? mCarouselInfoData.pageSize : APIConstants.PAGE_INDEX_COUNT;        new MenuDataModel().fetchCarouseldata(mContext, mCarouselInfoData.name, mStartIndex, pageSize, true,mCarouselInfoData.modified_on, new MenuDataModel.CarouselContentListCallback() {            @Override            public void onCacheResults(List<CardData> dataList) {                if ((dataList == null || dataList.isEmpty())) {                    showNoDataMessage();                    return;                }                fillData(dataList);            }            @Override            public void onOnlineResults(List<CardData> dataList) {                if ((dataList == null || dataList.isEmpty())) {                    showNoDataMessage();                    return;                }                fillData(dataList);            }            @Override            public void onOnlineError(Throwable error, int errorCode) {                //Log.d(TAG, "fetchCarouselData: OnOnlineError: t- ");                if (errorCode == APIRequest.ERR_NO_NETWORK) {                    showNoDataMessage();                    return;                }                showNoDataMessage();            }        });    }    @Override    public boolean onBackClicked() {        return super.onBackClicked();    }    public void showProgressBar() {        if (mProgressBar == null) {            return;        }        mProgressBar.setVisibility(View.VISIBLE);    }    public void dismissProgressBar() {        if (mProgressBar == null) {            return;        }        mProgressBar.setVisibility(View.GONE);    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        //Log.d(TAG, "onConfigurationChanged(): " + newConfig.orientation);        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {            //Log.d(TAG, "dismiss pop up window");            if (mPopUpWindowSeasons != null) {                mPopUpWindowSeasons.dismissPopupWindow();            }        }        super.onConfigurationChanged(newConfig);    }    public void onEventMainThread(ContentDownloadEvent event) {        LoggerD.debugDownload("download event- " + event);        if(event == null || event.cardData == null || event.cardData._id == null|| mAdapterEpisode == null) return;//        if (!event.tvShowCardData._id.equals(mRelatedVODData._id)) return;        List<CardData> episodes = mAdapterEpisode.getItems();        if (episodes == null) return;        for (int i = 0; i < episodes.size(); i++) {            if (episodes.get(i)._id != null                    && episodes.get(i)._id.equalsIgnoreCase(event.cardData._id)) {                mAdapterEpisode.notifyDataSetChanged();                return;            }        }    }    private static class EpisodesCallTask extends AsyncTask<Void, Void, Void> {        /**         * Override this method to perform a computation on a background thread. The         * specified parameters are the parameters passed to {@link #execute}         * by the caller of this task.Fr         * <p>         * This method can call {@link #publishProgress} to publish updates         * on the UI thread.         *         * @param params The parameters of the task.         * @return A result, defined by the subclass of this task.         * @see #onPreExecute()         * @see #onPostExecute         * @see #publishProgress         */        private final WeakReference<FragmentEpisodes> fragmentEpisodesWeakReference;        EpisodesCallTask(FragmentEpisodes fragmentEpisodesWeakReference) {            this.fragmentEpisodesWeakReference = new WeakReference<>(fragmentEpisodesWeakReference);        }        @Override        protected Void doInBackground(final Void... params) {            if (fragmentEpisodesWeakReference == null || fragmentEpisodesWeakReference.get() == null)                return null;            if (fragmentEpisodesWeakReference.get().mRelatedVODData == null                    || fragmentEpisodesWeakReference.get().mListSeasons == null                    || fragmentEpisodesWeakReference.get().mListSeasons.isEmpty()) {                return null;            }            CardData seasonData = fragmentEpisodesWeakReference.get().mListSeasons.get(fragmentEpisodesWeakReference.get().mSelectedSeasonPosition);            //Update selected season text on drop down header//            fragmentEpisodesWeakReference.get().updateDropDownTitle();//            fragmentEpisodesWeakReference.get().showProgressBar();            fragmentEpisodesWeakReference.get().mCacheManager.getRelatedVODList(seasonData._id, fragmentEpisodesWeakReference.get().mStartIndex, true,                    fragmentEpisodesWeakReference.get());            return null;        }    }}